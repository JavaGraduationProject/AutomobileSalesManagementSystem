<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
          
    <!-- 指明配置文件存放位置 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    
    <!-- druid  -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
      	<property name="url" value="${jdbc.url}" />
      	<property name="username" value="${jdbc.username}" />
      	<property name="password" value="${jdbc.password}" />

      	<!-- 配置初始化大小、最小、最大 -->
      	<property name="initialSize" value="3" />
      	<property name="minIdle" value="1" /> 
      	<property name="maxActive" value="20" />

      	<!-- 配置获取连接等待超时的时间 -->
      	<property name="maxWait" value="60000" />

      	<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      	<property name="timeBetweenEvictionRunsMillis" value="60000" />

      	<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      	<property name="minEvictableIdleTimeMillis" value="300000" />

      	<property name="validationQuery" value="SELECT 'x'" />
      	<property name="testWhileIdle" value="true" />
      	<property name="testOnBorrow" value="false" />
      	<property name="testOnReturn" value="false" />

		<!-- mysql 不支持 poolPreparedStatements-->  
      	<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
      	<!--<property name="poolPreparedStatements" value="true" />-->
      	<!--<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />-->

      	<!-- 配置监控统计拦截的filters -->
      	<property name="filters" value="stat" /> 
    </bean>  
    
    <!-- sqlSessionFactory spring和myBatis整合 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- mybatis配置文件 -->
		<property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml"/>
	</bean>
	
	<!-- 
	MapperScannerConfigurer：mapper的扫描器，将包下边的mapper接口自动创建代理对象，
	自动创建到spring容器中，bean的id是mapper的类名（首字母小写）
	 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 配置扫描包的路径
		如果要扫描多个包，中间使用半角逗号分隔
		要求mapper.xml和mapper.java同名且在同一个目录 
		 -->
		<property name="basePackage" value="com.megagao.production.ssm.mapper,com.megagao.production.ssm.mapper.authority"/>
		<!-- 使用sqlSessionFactoryBeanName -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>

	<!-- 事务管理器 -->
	<bean id="txManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 通知 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="view*" read-only="true" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" /><!-- 防止漏网之鱼 -->
		</tx:attributes>
	</tx:advice>

	<!-- 切面 -->
	<aop:config>
		<!-- 切点 管理所有Service的方法 -->
		<aop:pointcut expression="execution(* com.megagao.production.ssm.service.*.*(..))" id="transactionPointCut"/>
		<!-- 增强，进行事务控制 Advisor -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointCut"/>
	</aop:config>
</beans>