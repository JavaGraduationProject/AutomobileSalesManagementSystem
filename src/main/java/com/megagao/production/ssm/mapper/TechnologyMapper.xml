<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.megagao.production.ssm.mapper.TechnologyMapper" >
  <resultMap id="BaseResultMap" type="com.megagao.production.ssm.domain.Technology" >
    <id column="technology_id" property="technologyId" jdbcType="VARCHAR" />
    <result column="technology_name" property="technologyName" jdbcType="VARCHAR" />
    <result column="price" property="price" jdbcType="DECIMAL" />
    <result column="vital_process_period" property="vitalProcessPeriod" jdbcType="VARCHAR" />
    <result column="standard_capacity" property="standardCapacity" jdbcType="INTEGER" />
    <result column="overtime_standard_capacity" property="overtimeStandardCapacity" jdbcType="INTEGER" />
    <result column="overtime_overfulfil_capacity" property="overtimeOverfulfilCapacity" jdbcType="INTEGER" />
    <result column="double_capacity" property="doubleCapacity" jdbcType="INTEGER" />
    <result column="overfulfil_capacity" property="overfulfilCapacity" jdbcType="INTEGER" />
  </resultMap>
  
  <!-- 扩展的sql -->
  <!-- 批量删除 -->
	<delete id="deleteBatch">
		DELETE
		FROM
			technology
		WHERE
			technology_id IN
		<foreach collection="array" item="id" open="(" close=")" separator=",">
			#{id}
		</foreach>
	</delete>
	
	<select id="searchTechnologyByTechnologyId" parameterType="string" resultMap="BaseResultMap">
		SELECT
			*
		FROM
			technology
		WHERE
			technology_id LIKE CONCAT(
				'%',
				#{technologyId},'%' ) 
	</select>
	
	<select id="searchTechnologyByTechnologyName" parameterType="string" resultMap="BaseResultMap">
		SELECT
			*
		FROM
			technology
		WHERE
			technology_name LIKE CONCAT(
				'%',
				#{technologyName},'%' ) 
	</select>
	
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    technology_id, technology_name, price, vital_process_period, standard_capacity, overtime_standard_capacity, 
    overtime_overfulfil_capacity, double_capacity, overfulfil_capacity
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.megagao.production.ssm.domain.TechnologyExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from technology
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from technology
    where technology_id = #{technologyId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from technology
    where technology_id = #{technologyId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.megagao.production.ssm.domain.TechnologyExample" >
    delete from technology
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.megagao.production.ssm.domain.Technology" >
    insert into technology (technology_id, technology_name, price, 
      vital_process_period, standard_capacity, overtime_standard_capacity, 
      overtime_overfulfil_capacity, double_capacity, 
      overfulfil_capacity)
    values (#{technologyId,jdbcType=VARCHAR}, #{technologyName,jdbcType=VARCHAR}, #{price,jdbcType=DECIMAL}, 
      #{vitalProcessPeriod,jdbcType=VARCHAR}, #{standardCapacity,jdbcType=INTEGER}, #{overtimeStandardCapacity,jdbcType=INTEGER}, 
      #{overtimeOverfulfilCapacity,jdbcType=INTEGER}, #{doubleCapacity,jdbcType=INTEGER}, 
      #{overfulfilCapacity,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.megagao.production.ssm.domain.Technology" >
    insert into technology
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="technologyId != null" >
        technology_id,
      </if>
      <if test="technologyName != null" >
        technology_name,
      </if>
      <if test="price != null" >
        price,
      </if>
      <if test="vitalProcessPeriod != null" >
        vital_process_period,
      </if>
      <if test="standardCapacity != null" >
        standard_capacity,
      </if>
      <if test="overtimeStandardCapacity != null" >
        overtime_standard_capacity,
      </if>
      <if test="overtimeOverfulfilCapacity != null" >
        overtime_overfulfil_capacity,
      </if>
      <if test="doubleCapacity != null" >
        double_capacity,
      </if>
      <if test="overfulfilCapacity != null" >
        overfulfil_capacity,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="technologyId != null" >
        #{technologyId,jdbcType=VARCHAR},
      </if>
      <if test="technologyName != null" >
        #{technologyName,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="vitalProcessPeriod != null" >
        #{vitalProcessPeriod,jdbcType=VARCHAR},
      </if>
      <if test="standardCapacity != null" >
        #{standardCapacity,jdbcType=INTEGER},
      </if>
      <if test="overtimeStandardCapacity != null" >
        #{overtimeStandardCapacity,jdbcType=INTEGER},
      </if>
      <if test="overtimeOverfulfilCapacity != null" >
        #{overtimeOverfulfilCapacity,jdbcType=INTEGER},
      </if>
      <if test="doubleCapacity != null" >
        #{doubleCapacity,jdbcType=INTEGER},
      </if>
      <if test="overfulfilCapacity != null" >
        #{overfulfilCapacity,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.megagao.production.ssm.domain.TechnologyExample" resultType="java.lang.Integer" >
    select count(*) from technology
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update technology
    <set >
      <if test="record.technologyId != null" >
        technology_id = #{record.technologyId,jdbcType=VARCHAR},
      </if>
      <if test="record.technologyName != null" >
        technology_name = #{record.technologyName,jdbcType=VARCHAR},
      </if>
      <if test="record.price != null" >
        price = #{record.price,jdbcType=DECIMAL},
      </if>
      <if test="record.vitalProcessPeriod != null" >
        vital_process_period = #{record.vitalProcessPeriod,jdbcType=VARCHAR},
      </if>
      <if test="record.standardCapacity != null" >
        standard_capacity = #{record.standardCapacity,jdbcType=INTEGER},
      </if>
      <if test="record.overtimeStandardCapacity != null" >
        overtime_standard_capacity = #{record.overtimeStandardCapacity,jdbcType=INTEGER},
      </if>
      <if test="record.overtimeOverfulfilCapacity != null" >
        overtime_overfulfil_capacity = #{record.overtimeOverfulfilCapacity,jdbcType=INTEGER},
      </if>
      <if test="record.doubleCapacity != null" >
        double_capacity = #{record.doubleCapacity,jdbcType=INTEGER},
      </if>
      <if test="record.overfulfilCapacity != null" >
        overfulfil_capacity = #{record.overfulfilCapacity,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update technology
    set technology_id = #{record.technologyId,jdbcType=VARCHAR},
      technology_name = #{record.technologyName,jdbcType=VARCHAR},
      price = #{record.price,jdbcType=DECIMAL},
      vital_process_period = #{record.vitalProcessPeriod,jdbcType=VARCHAR},
      standard_capacity = #{record.standardCapacity,jdbcType=INTEGER},
      overtime_standard_capacity = #{record.overtimeStandardCapacity,jdbcType=INTEGER},
      overtime_overfulfil_capacity = #{record.overtimeOverfulfilCapacity,jdbcType=INTEGER},
      double_capacity = #{record.doubleCapacity,jdbcType=INTEGER},
      overfulfil_capacity = #{record.overfulfilCapacity,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.megagao.production.ssm.domain.Technology" >
    update technology
    <set >
      <if test="technologyName != null" >
        technology_name = #{technologyName,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        price = #{price,jdbcType=DECIMAL},
      </if>
      <if test="vitalProcessPeriod != null" >
        vital_process_period = #{vitalProcessPeriod,jdbcType=VARCHAR},
      </if>
      <if test="standardCapacity != null" >
        standard_capacity = #{standardCapacity,jdbcType=INTEGER},
      </if>
      <if test="overtimeStandardCapacity != null" >
        overtime_standard_capacity = #{overtimeStandardCapacity,jdbcType=INTEGER},
      </if>
      <if test="overtimeOverfulfilCapacity != null" >
        overtime_overfulfil_capacity = #{overtimeOverfulfilCapacity,jdbcType=INTEGER},
      </if>
      <if test="doubleCapacity != null" >
        double_capacity = #{doubleCapacity,jdbcType=INTEGER},
      </if>
      <if test="overfulfilCapacity != null" >
        overfulfil_capacity = #{overfulfilCapacity,jdbcType=INTEGER},
      </if>
    </set>
    where technology_id = #{technologyId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.megagao.production.ssm.domain.Technology" >
    update technology
    set technology_name = #{technologyName,jdbcType=VARCHAR},
      price = #{price,jdbcType=DECIMAL},
      vital_process_period = #{vitalProcessPeriod,jdbcType=VARCHAR},
      standard_capacity = #{standardCapacity,jdbcType=INTEGER},
      overtime_standard_capacity = #{overtimeStandardCapacity,jdbcType=INTEGER},
      overtime_overfulfil_capacity = #{overtimeOverfulfilCapacity,jdbcType=INTEGER},
      double_capacity = #{doubleCapacity,jdbcType=INTEGER},
      overfulfil_capacity = #{overfulfilCapacity,jdbcType=INTEGER}
    where technology_id = #{technologyId,jdbcType=VARCHAR}
  </update>
</mapper>